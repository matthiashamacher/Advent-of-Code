<?php

namespace App\Command;

use DateTimeImmutable;
use NumberFormatter;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;

#[
    AsCommand(
        name: 'app:create-day',
        description: 'Creates a new day',
    )
]
class CreateDayCommand extends Command
{
    public function configure(): void
    {
        $this->addArgument(
            'day',
            InputArgument::REQUIRED,
            'The day to create'
        )->addArgument(
            'date',
            InputArgument::OPTIONAL,
            'The date of the day',
            'now'
        )->addOption(
            'force',
            'f',
            InputOption::VALUE_NONE,
            'Force the creation of the day'
        );
    }


    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);

        $io->title('Advent of Code - Creating a new day');

        $day             = $input->getArgument('day');
        $numberFormatter = new NumberFormatter('en', NumberFormatter::SPELLOUT);
        $dayName         = $numberFormatter->format($day);
        $capitalizedDay  = ucfirst($dayName);

        $dateTime = new DateTimeImmutable($input->getArgument('date'));
        $year     = $dateTime->format('Y');
        $date     = $dateTime->format('d.m.Y');

        $fileSystem = new Filesystem();
        $commandDir = sprintf(
            'src/Command/Year%s',
            $year
        );

        if ($fileSystem->exists($commandDir) === false) {
            $fileSystem->mkdir($commandDir);
        }

        $commandFile = sprintf(
            '%s/Day%sCommand.php',
            $commandDir,
            $capitalizedDay
        );

        if ($fileSystem->exists($commandFile) === true && $input->getOption('force') === false) {
            $result = $io->ask('The file already exists. Do you want to overwrite it? [y/N]', 'n');

            if (strtolower($result) !== 'y') {
                $io->error('Aborted');

                return Command::FAILURE;
            }
        }

        $fileContent = <<<EOF
<?php

namespace App\Command\Year$year;

use App\Command\AbstractCommand;
use Symfony\Component\Console\Attribute\AsCommand;

#[AsCommand('$year:day-$dayName', 'Advent of Code $year - Day $capitalizedDay')]
class Day{$capitalizedDay}Command extends AbstractCommand
{
    protected const DAY = $day;

    protected const DATE = '$date';

    protected function partOne(array \$input): int
    {
        parent::partOne(\$input); // TODO: Change the autogenerated stub
    }

    protected function partTwo(array \$input): int
    {
        parent::partTwo(\$input); // TODO: Change the autogenerated stub
    }
}

EOF;

        $fileSystem->dumpFile($commandFile, $fileContent);

        // Create stats file
        $statsFile = sprintf(
            'stats/%s/day%s.json',
            $year,
            $day
        );

        $stats = [
            'start' => time(),
            'partOne' => [
                'executionTime' => 0,
                'memoryUsage'   => 0,
                'end'           => '',
                'retries'       => 0,
            ],
            'partTwo' => [
                'executionTime' => 0,
                'memoryUsage'   => 0,
                'end'           => '',
                'retries'       => 0,
            ],
            'timeNeeded' => [
                'partOne' => 0,
                'partTwo' => 0,
            ]
        ];

        $fileSystem->dumpFile($statsFile, json_encode($stats, JSON_PRETTY_PRINT));

        $io->success(
            sprintf(
                'The day has been created successfully. Command can be found here: %s',
                $commandFile
            )
        );

        return Command::SUCCESS;
    }
}